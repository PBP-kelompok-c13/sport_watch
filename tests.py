"""Comprehensive integration tests for the Sport Watch project.

These tests intentionally span multiple apps to ensure that the
cross-application flows (portal berita, shop, shopping cart, and
scoreboard) work together.  Having a single suite in the project root
also helps when running ``python manage.py test`` without specifying an
app label, which was one of the user requirements.
"""

from __future__ import annotations

import json
from decimal import Decimal

from django.contrib.auth import get_user_model
from django.contrib.auth.models import AnonymousUser
from django.contrib.sessions.middleware import SessionMiddleware
from django.test import Client, RequestFactory, TestCase
from django.urls import resolve, reverse
from django.utils import timezone

from fitur_belanja.context_processors import cart_badge
from fitur_belanja.models import Cart, CartItem
from fitur_belanja.utils import cart_from_request, get_or_create_cart
from portal_berita.models import Berita, KategoriBerita
from scoreboard.models import Scoreboard
from shop.forms import ProductForm
from shop.models import Brand, Category, Product


User = get_user_model()


def attach_session(request):
    """Attach a session to a request generated by :class:`RequestFactory`."""

    middleware = SessionMiddleware(lambda req: None)
    middleware.process_request(request)
    request.session.save()
    return request


class SportWatchTestCase(TestCase):
    """End-to-end tests spanning the Sport Watch Django project."""

    @classmethod
    def setUpTestData(cls):
        cls.password = "super-secret"
        cls.user = User.objects.create_user(
            username="visitor",
            email="visitor@example.com",
            password=cls.password,
        )
        cls.staff = User.objects.create_user(
            username="staffer",
            email="staff@example.com",
            password=cls.password,
            is_staff=True,
        )
        cls.superuser = User.objects.create_superuser(
            username="manager",
            email="manager@example.com",
            password=cls.password,
        )

        cls.category = Category.objects.create(name="Shoes", slug="shoes")
        cls.child_category = Category.objects.create(
            name="Running", slug="running", parent=cls.category
        )
        cls.brand = Brand.objects.create(name="Fleet", slug="fleet")

        cls.product = Product.objects.create(
            name="Fleet Runner",
            category=cls.category,
            brand=cls.brand,
            description="Lightweight running shoes",
            price=Decimal("120.00"),
            sale_price=Decimal("99.99"),
            stock=10,
            status="active",
            created_by=cls.staff,
            thumbnail="https://example.com/shoe.jpg",
            is_featured=True,
        )
        cls.secondary_product = Product.objects.create(
            name="Trail Blazer",
            category=cls.child_category,
            price=Decimal("80.00"),
            stock=5,
            status="active",
        )

        cls.kategori = KategoriBerita.objects.create(nama="Sepak Bola")
        cls.news = Berita.objects.create(
            judul="Derby Day",
            konten="Big match" * 5,
            kategori=cls.kategori,
            is_published=True,
            penulis=cls.staff,
            thumbnail="https://example.com/news.jpg",
        )

        cls.scoreboard_live = Scoreboard.objects.create(
            tim1="Team A",
            tim2="Team B",
            skor_tim1=1,
            skor_tim2=0,
            sport="NBA",
            status="live",
            tanggal=timezone.now(),
        )
        cls.scoreboard_recent = Scoreboard.objects.create(
            tim1="Team C",
            tim2="Team D",
            skor_tim1=2,
            skor_tim2=2,
            sport="EPL",
            status="recent",
            tanggal=timezone.now() - timezone.timedelta(days=1),
        )

    def setUp(self):
        self.client = Client()
        self.factory = RequestFactory()

    # ------------------------------------------------------------------
    # Shopping cart utilities & context processor
    # ------------------------------------------------------------------
    def test_cart_from_request_handles_guest_and_authenticated_flows(self):
        request = attach_session(self.factory.get("/"))
        request.user = AnonymousUser()

        guest_cart = cart_from_request(request)
        self.assertEqual(guest_cart.user, None)
        self.assertTrue(guest_cart.session_key)

        CartItem.objects.create(
            cart=guest_cart,
            product=self.product,
            qty=2,
            unit_price=self.product.final_price,
        )

        # Promote the same request to an authenticated user to trigger merge
        request.user = self.user
        merged = get_or_create_cart(request)
        self.assertEqual(merged.user, self.user)
        self.assertEqual(merged.item_count, 2)
        self.assertFalse(
            Cart.objects.filter(session_key=request.session.session_key, user__isnull=True).exists()
        )

        badge = cart_badge(request)
        self.assertEqual(badge["cart_count"], 2)

    def test_cart_from_request_guest_creates_new_session(self):
        request = self.factory.get("/")
        request.user = AnonymousUser()
        request = attach_session(request)

        # Remove the session key to simulate a brand new visitor
        request.session._session_key = None
        guest_cart = cart_from_request(request)
        self.assertTrue(guest_cart.session_key)
        self.assertEqual(guest_cart.item_count, 0)

    # ------------------------------------------------------------------
    # Fitur belanja views
    # ------------------------------------------------------------------
    def test_cart_views_flow(self):
        # Guest adds an item to the cart
        add_url = reverse("fitur_belanja:add_to_cart")
        response = self.client.post(
            add_url,
            {"product_id": str(int(self.secondary_product.id)), "qty": 2},
        )
        self.assertEqual(response.status_code, 200)
        data = response.json()
        self.assertTrue(data["ok"])
        self.assertEqual(data["cart_count"], 2)

        # Adding a product created by the same staff user should be blocked
        self.client.force_login(self.staff)
        response = self.client.post(
            add_url,
            {"product_id": str(int(self.product.id)), "qty": 1},
        )
        self.assertEqual(response.status_code, 400)
        self.assertFalse(response.json()["ok"])

        cart = Cart.objects.create(user=self.staff)
        item = CartItem.objects.create(
            cart=cart,
            product=self.secondary_product,
            qty=1,
            unit_price=self.secondary_product.final_price,
        )

        update_url = reverse("fitur_belanja:update_qty")
        response = self.client.post(update_url, {"item_id": item.id, "qty": 5})
        self.assertEqual(response.status_code, 200)
        item.refresh_from_db()
        self.assertEqual(item.qty, 5)

        remove_url = reverse("fitur_belanja:remove_item")
        response = self.client.post(remove_url, {"item_id": item.id})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(cart.items.count(), 0)

        # Clear cart resets the counter
        CartItem.objects.create(
            cart=cart,
            product=self.secondary_product,
            qty=3,
            unit_price=self.secondary_product.final_price,
        )
        clear_url = reverse("fitur_belanja:clear_cart")
        response = self.client.post(clear_url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(cart.items.count(), 0)

        # Shopping page displays totals and calculated values
        response = self.client.get(reverse("fitur_belanja:shopping"))
        self.assertEqual(response.status_code, 200)
        self.assertIn("subtotal", response.context)

    # ------------------------------------------------------------------
    # Product model helpers & JSON endpoints
    # ------------------------------------------------------------------
    def test_product_model_helpers_and_json_apis(self):
        product = self.product
        self.assertEqual(product.final_price, product.sale_price)
        self.assertGreater(product.discount_percent, 0)
        self.assertTrue(product.in_stock)

        product.reserve(2)
        product.refresh_from_db()
        self.assertEqual(product.stock, 8)
        product.restock(5)
        product.refresh_from_db()
        self.assertEqual(product.stock, 13)

        with self.assertRaises(ValueError):
            product.reserve(0)
        with self.assertRaises(ValueError):
            product.restock(0)

        list_response = self.client.get(
            reverse("shop:products_json"),
            {"sort": "price_desc", "q": "Fleet", "category": self.category.slug},
        )
        self.assertEqual(list_response.status_code, 200)
        payload = list_response.json()
        self.assertTrue(payload["results"])

        detail_response = self.client.get(reverse("shop:product_detail_json", args=[product.slug]))
        self.assertEqual(detail_response.status_code, 200)
        detail_payload = detail_response.json()
        self.assertEqual(detail_payload["final_price"], float(product.final_price))

        mini_response = self.client.get(reverse("shop:product_mini_json", args=[product.id]))
        self.assertEqual(mini_response.status_code, 200)

        # Product list HTML view works with filters and pagination
        response = self.client.get(reverse("shop:list"), {"sort": "featured"})
        self.assertEqual(response.status_code, 200)

    def test_product_create_edit_delete_and_review_flow(self):
        self.client.force_login(self.user)

        create_url = reverse("shop:create")
        response = self.client.post(
            create_url,
            {
                "name": "My Product",
                "category": self.category.id,
                "brand": self.brand.id,
                "description": "Nice",
                "price": "50",
                "sale_price": "45",
                "currency": "IDR",
                "stock": 5,
                "thumbnail": "https://example.com/p.png",
                "is_featured": "on",
            },
            HTTP_X_REQUESTED_WITH="XMLHttpRequest",
        )
        self.assertEqual(response.status_code, 201)
        product_id = response.json()["product"]["id"]
        created_product = Product.objects.get(id=product_id)
        self.assertEqual(created_product.created_by, self.user)
        self.assertTrue(created_product.slug)
        self.assertFalse(created_product.is_featured)

        edit_url = reverse("shop:edit", args=[created_product.id])
        response = self.client.get(edit_url, HTTP_X_REQUESTED_WITH="XMLHttpRequest")
        self.assertEqual(response.status_code, 200)

        response = self.client.post(
            edit_url,
            {
                "name": "My Product",
                "category": self.category.id,
                "brand": self.brand.id,
                "description": "Updated",
                "price": "55",
                "sale_price": "45",
                "currency": "IDR",
                "stock": 4,
                "thumbnail": "https://example.com/p.png",
                "is_featured": "on",
            },
            follow=True,
        )
        self.assertEqual(response.status_code, 200)
        created_product.refresh_from_db()
        self.assertEqual(created_product.description, "Updated")

        review_url = reverse("shop:create_review", args=[created_product.id])
        response = self.client.post(
            review_url,
            {"rating": 5, "title": "Great", "content": "Loved it"},
        )
        self.assertEqual(response.status_code, 201)
        review_payload = response.json()
        self.assertTrue(review_payload["ok"])

        reviews_json = self.client.get(reverse("shop:reviews_json", args=[created_product.id]))
        self.assertEqual(reviews_json.status_code, 200)
        self.assertTrue(reviews_json.json()["results"])

        delete_url = reverse("shop:delete", args=[created_product.id])
        response = self.client.post(delete_url)
        self.assertEqual(response.status_code, 200)
        self.assertFalse(Product.objects.filter(id=created_product.id).exists())

    # ------------------------------------------------------------------
    # Portal berita views
    # ------------------------------------------------------------------
    def test_portal_register_login_logout_and_detail_comment_flow(self):
        register_url = reverse("portal_berita:register")
        response = self.client.post(
            register_url,
            {
                "username": "newbie",
                "password1": "ValidPass123",
                "password2": "ValidPass123",
            },
            follow=True,
        )
        self.assertEqual(response.status_code, 200)
        self.assertTrue(User.objects.filter(username="newbie").exists())

        login_url = reverse("portal_berita:login")
        response = self.client.post(login_url, {"username": "newbie", "password": "wrong"})
        self.assertEqual(response.status_code, 200)

        response = self.client.post(login_url, {"username": "newbie", "password": "ValidPass123"})
        self.assertEqual(response.status_code, 302)

        news_url = reverse("portal_berita:detail_news", args=[self.news.id])
        response = self.client.post(news_url, {"content": "Nice match"})
        self.assertEqual(response.status_code, 302)
        self.news.refresh_from_db()
        self.assertEqual(self.news.comment_count, 1)

        logout_url = reverse("portal_berita:logout")
        response = self.client.get(logout_url)
        self.assertEqual(response.status_code, 302)

    def test_portal_admin_crud_and_listing_views(self):
        self.client.force_login(self.staff)

        list_response = self.client.get(reverse("portal_berita:list_news"))
        self.assertEqual(list_response.status_code, 200)
        self.assertIn("featured_news", list_response.context)

        create_response = self.client.post(
            reverse("portal_berita:create_news"),
            {
                "judul": "New Story",
                "konten": "Content",
                "is_published": True,
                "penulis": self.staff.id,
            },
            HTTP_X_REQUESTED_WITH="XMLHttpRequest",
        )
        self.assertEqual(create_response.status_code, 200)
        self.assertEqual(create_response.json()["status"], "success")
        created_id = Berita.objects.exclude(id=self.news.id).first().id

        edit_url = reverse("portal_berita:edit_news", args=[created_id])
        response = self.client.post(
            edit_url,
            {
                "judul": "Updated Story",
                "konten": "Updated",
                "is_published": True,
                "penulis": self.staff.id,
            },
            HTTP_X_REQUESTED_WITH="XMLHttpRequest",
        )
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json()["status"], "success")

        delete_url = reverse("portal_berita:delete_news", args=[created_id])
        response = self.client.post(delete_url, HTTP_X_REQUESTED_WITH="XMLHttpRequest")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json()["status"], "success")

        management = self.client.get(reverse("portal_berita:news_management"))
        self.assertEqual(management.status_code, 200)

        add_category = self.client.post(
            reverse("portal_berita:add_category"),
            {"nama": "Basket"},
            follow=True,
        )
        self.assertEqual(add_category.status_code, 200)
        self.assertTrue(KategoriBerita.objects.filter(nama="Basket").exists())

        load_more = self.client.get(reverse("portal_berita:load_more_news"), {"offset": 0})
        self.assertEqual(load_more.status_code, 200)

        json_resp = self.client.post(reverse("portal_berita:berita_json_view"))
        self.assertEqual(json_resp.status_code, 200)
        data = json.loads(json_resp.content)
        self.assertTrue(json.loads(data))

    # ------------------------------------------------------------------
    # Scoreboard helpers
    # ------------------------------------------------------------------
    def test_scoreboard_filter_and_index(self):
        response = self.client.get(reverse("scoreboard:index"))
        self.assertEqual(response.status_code, 200)
        self.assertIn(self.scoreboard_live, response.context["live"])

        response = self.client.get(reverse("scoreboard:filter_scores"), {"status": "finished"})
        self.assertEqual(response.status_code, 200)
        payload = response.json()
        self.assertTrue(payload["scores"])

    # ------------------------------------------------------------------
    # Project level sanity checks
    # ------------------------------------------------------------------
    def test_urls_and_forms_are_resolvable(self):
        self.assertEqual(resolve("/shop/").url_name, "list")
        form = ProductForm()
        self.assertIn("name", form.fields)


