# Generated by Django 5.2.5 on 2025-10-18 09:11

from django.db import migrations


def drop_legacy_structures(apps, schema_editor):
    """
    Safely clean up legacy tables/columns from earlier iterations.

    The previous version of this migration attempted to remove models that are
    no longer present in the historical state which caused migrations to fail
    with a KeyError. Instead of manipulating the historical state, we perform a
    best-effort cleanup directly against the database while keeping the state
    untouched so Django stays in sync with the actual models.
    """

    with schema_editor.connection.cursor() as cursor:
        # Drop legacy tables when they exist. The IF EXISTS guard keeps the
        # command idempotent across SQLite/PostgreSQL/MySQL backends.
        cursor.execute("DROP TABLE IF EXISTS portal_berita_produk")
        cursor.execute("DROP TABLE IF EXISTS portal_berita_kategoriproduk")

        # Attempt to drop the obsolete `ringkasan` column if the database still
        # has it. Different backends have different syntaxes and capabilities,
        # therefore we simply try and ignore failures when the column is gone
        # or the backend doesn't support the statement (older SQLite versions).
        try:
            cursor.execute("ALTER TABLE portal_berita_berita DROP COLUMN ringkasan")
        except Exception:
            # Fall back to manual inspection for SQLite where DROP COLUMN might
            # not be available or when running on an older SQLite version.
            if schema_editor.connection.vendor == "sqlite":
                cursor.execute("PRAGMA table_info('portal_berita_berita')")
                columns = {row[1] for row in cursor.fetchall()}
                if "ringkasan" in columns:
                    # SQLite >= 3.35 supports DROP COLUMN; retry once more.
                    try:
                        cursor.execute(
                            "ALTER TABLE portal_berita_berita DROP COLUMN ringkasan"
                        )
                    except Exception:
                        # As a last resort, leave the column intact rather than
                        # aborting the migration. This keeps the migration
                        # chain operational even if the column lingers.
                        pass


class Migration(migrations.Migration):

    dependencies = [
        ('portal_berita', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(drop_legacy_structures, migrations.RunPython.noop),
    ]
